# define parameters to view during experiment
parameter_window.remove_all();
int trial_parameter = parameter_window.add_parameter( "trial number" );
int type_parameter = parameter_window.add_parameter( "condition" );
int totaltrial_parameter = parameter_window.add_parameter( "total trials" );

int status_parameter = parameter_window.add_parameter( "on break" );
int wordscore = parameter_window.add_parameter( "Words Score" );

# Set-up conditions and trials
int total_trials = 10;
array<int> trial_order[total_trials];
array<int> conds[2];

parameter_window.set_parameter(totaltrial_parameter, string(total_trials));

loop 
	int i = 1 
until 
	i > total_trials
begin
	trial_order[i] = i;
	i = i + 1;
end;
trial_order.shuffle();

#Generate array of stimuli names
array <string> start_pics[total_trials];
array <string> videos[total_trials];
array <string> end_pics[total_trials];
loop 
	int i = 1 
until 
	i > total_trials 
begin
		start_pics[i] = "crosshair.png";
		
		videos[i] = "s" + string(i) + "_face_audio" + string(i) + string(i+1) + string(i+2) + ".avi";
		
		end_pics[i] = "crosshair.png";

	i = i + 1;
end;

#term.print( videos );

#Read in words for intelligiblity test
int num_words = 5; # per trial
array <int> words_order[total_trials];
loop 
	int i = 1 
until 
	i > total_trials 
begin
	words_order[i] = trial_order[i]; 
	i = i + 1;
end;
#term.print(words_order);

#Output trial order
output_file out1 = new output_file; 
out1.open( logfile.subject() + "-trial_order.txt" ); 
out1.print( "Run\tTrial\n" );
loop 
	int i = 1 
until 
	i > total_trials 
begin
	out1.print( string(i) + "\t" + string(trial_order[i]) + "\n" ); 
	i = i + 1;
end;
out1.close();


#Output subjects score for intelligibility rating
output_file out2 = new output_file;
out2.open( logfile.subject() + "-behav_score.txt" ); 
out2.print( "Run\tTrial\tWords\n" );

output_file out3 = new output_file;
out3.open( logfile.subject() + "-typed_words.txt" ); 

#Define mouse variables
int answer;
mouse mse = response_manager.get_mouse( 1 );

#Define button locations for test words
int num_locations = 16;
array<int> location[num_locations][4];	

location[1] = { -300, 100, 183, 209 };
location[2] = { -300, 100, 131, 149 };
location[3] = { -300, 100, 71, 89 };
location[4] = { -300, 100,  11, 29 };
location[5] = { -300, 100, -47, -29 };
location[6] = { -300, 100, -107, -89 };
location[7] = { -300, 100, -167, -149 };
location[8] = { -300, 100, -227, -209 };
location[9] = { 0, 400, 183, 209 };
location[10] = { 0, 400, 131, 149 };
location[11] = { 0, 400, 71, 89 };
location[12] = { 0, 400, 11, 29 };
location[13] = { 0, 400,-47, -29};
location[14] = { 0, 400, -107, -89 };
location[15] = { 0, 400, -167, -149 };
location[16] = { 325, 590, -359, -329 };


# Get selection for word
mse.set_xy( 0, 0 ); 
sub
	int get_wrd_selection # how to find what box was selected
begin
	int x = mse.x();
	int y = mse.y();
		loop 
			int j = 1
		until 
			j > num_locations 
		begin
			if x >= location[j][1] && x <= location[j][2] && y >= location[j][3] && y <= location[j][4] then
				return j
			end;
			j = j + 1;
		end;
		return 0
	end;

# subroutine to sum elements of an array
sub
    int int_array_sum( array<int,1>& my_array )
begin
    int sum = 0;

    loop
        int i = 1
    until
        i > my_array.count()
    begin
        sum = sum + my_array[i];
        i = i + 1;
    end;
    return sum
end;

#Define trial variables
int run;
int current_time;

#Loop through all trials
loop 
	int i = 1
until 
	i > total_trials 
begin
	parameter_window.set_parameter(trial_parameter, string(i));
	
	#Define trial and target index
	run = trial_order[i];
	int word = words_order[i];
	array<string> true_words[num_words];
	#term.print(word);
	
	# load words to present
	input_file wrds = new input_file; 
	wrds.open( "E://Aisling//Presentation Driver Rep//keywords//keywords_" + string(word) + ".txt" ); 
	wrds.set_delimiter( '\t' ); 
   loop 
		int j = 1
	until 
		j > num_words
	begin
		string curr_word = wrds.get_string();
		words4pic[j].set_caption( curr_word );
		words4pic[j].redraw();
		true_words[j]=curr_word;
		j = j + 1;
	end;
	wrds.close();
	

#************************************************************************************************
	
	#Initialise pictures and videos for trial
	intro_txt.set_caption( "Trials remaining: " + string(total_trials-i+1) + "\n\n\nPress Spacebar to Continue to the next trial" );
	intro_txt.redraw();
	default_start_pic.set_filename( start_pics[run] ); default_start_pic.load();
	vid.set_filename( videos[run] );
	# set location of video based on condition 
	if run > total_trials/2 then
		vid.set_x(500); # put video on right
	end;
	stim_event.set_event_code( string(run) );
	stim_event.set_port_code( trial_order[i] );
	default_end_pic.set_filename( end_pics[run] ); default_end_pic.load();
	vid.prepare();
	
	parameter_window.set_parameter(status_parameter, "Break");
	#Present trials
	intro_trial.present();
	
	parameter_window.set_parameter(status_parameter, "Cue");
	start_trial.present();
	current_time = clock.time();
	
	parameter_window.set_parameter(status_parameter, "Trial");
	stim_trial.present();
	vid.release();
	stop_trial.present();

	parameter_window.set_parameter(status_parameter, "Break");
	vid.set_x(-500); # return video to default position 
#****************************************************************************************

	#Use get input and show what was typed after pressing enter
	instruc_text.set_caption( "Type each word you heard in the previous trial \n\n Press Enter when done" );
	instruc_text.redraw();
	instruc_pic.present();

	
	# Enter is the default deliminator
	system_keyboard.set_case_mode( system_keyboard.CASE_UPPER );
	system_keyboard.set_max_length( 1 );
	string caption = "";
	int last_backspace_count = response_manager.total_response_count(1);

	system_keyboard.set_time_out(10);

	loop 
		until 
			false
	begin
		
		 bool do_set_caption = false;
		
		 string input = system_keyboard.get_input();
		 if input.count() > 0 then
			  caption.append( input );
			  do_set_caption = true;
		 end;

		 # check for backspace
		 int back_count = response_manager.total_response_count(1) - last_backspace_count;
		 if back_count > 0 then
			  int caption_size = caption.count() - back_count;
			  if caption_size < 0 then
					caption_size = 0;
			  end;
			  caption.resize( caption_size );
			  do_set_caption = true;
			  last_backspace_count = last_backspace_count + back_count;
		 end;

		 # if there were changes to caption, update txt1 and present the picture
		 if do_set_caption then
			  if caption.count() > 0 then
					response_text.set_caption( caption );
			  else
					response_text.set_caption( " " );
			  end;
			  response_text.redraw();
			  pic1.present();
		 end;
		
		if system_keyboard.last_input_type() == keyboard_delimiter then
			break
		end;
		
	end;
	

	out3.print( caption + "\n");
	term.print(caption + "\n"); 

	int num_w_correct=0;
	int num_typed_words = 1; # accounting for the fact that there is no spacebar after the last word
	int start_val=2;
	string curr_char="";
	string typed_word="";

	if caption[1] == 00	then
		# no entry	
	else	
		loop int w=start_val until w>caption.count() begin

				if w==start_val && caption[w] != 32 then	# special case for beginning
					term.print(string(1)+ "\n");
					curr_char=caption.substring(1,1);
					typed_word.append(curr_char);
				end;

				if w==caption.count() && caption[w] != 32 then	# special case for end (if there is no space)
					curr_char=caption.substring(w,1);
					typed_word.append(curr_char);
					loop int j=1 until j > num_words begin
						
						string true_word = true_words[j];

						if (true_word == typed_word) then
							num_w_correct=num_w_correct+1;
							typed_word="";
							break
						end;
						j=j+1;
					end;
					typed_word="";
				end;

				if caption[w] == 32 && caption[w-1] != 32 then # ascii character value for space is 32
					# compare word with true word and clear tmp word
					num_typed_words = num_typed_words+1;

					loop int j=1 until j > num_words begin						
						string true_word = true_words[j];
						term.print(typed_word + "\n");

						if (true_word == typed_word) then
							num_w_correct=num_w_correct+1;
							typed_word="";
							break
						end;
						j=j+1;
					end;
					typed_word="";
				elseif caption[w] != 32 then
					# read characters into string
					curr_char=caption.substring(w,1);
					typed_word.append(curr_char);
					
				end;
				w=w+1;
		end;
		#term.print(string(num_typed_words)+ "\n"); 
		
	end;
	#term.print(string( num_w_correct)+ "\n");

	int words_score=0;
	finish_txt.set_caption("You scored " + string(num_w_correct) + "/" + string(5) + " Correct.\n\nPress spacebar to continue");
	finish_txt.redraw();
	finish_trial.present();

	
	#Output subjects score
	out2.print( string(i) + "\t" + string(trial_order[i]) + "\t" + caption + "\n" );
		
	#Present finish trial at end
	if i == total_trials then
		finish_txt.set_caption( "You are finished.\nThank you." );
		finish_txt.redraw ();
		finish_trial.present();
	end;
	
	i = i + 1;
	
end;
out2.close();